openapi: 3.0.3
info:
  title: Library API
  version: 1.0.0
  description: STD22095
servers:
  - url: https://library.com
tags:
  - name: books
    description: books operation
  - name: author
    description: author operation
  - name: topic
    description: topic operation
paths:
  /books:
    
    get:
      tags:
        - "books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
     
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: startDate
          required: false
          schema:
            type: object
            properties:
              start:
                $ref: '#/components/schemas/createUpdate/properties/releaseDate'
              end:
                $ref: '#/components/schemas/createUpdate/properties/releaseDate'

             

          
        

      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    put:
      tags:
        - "books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/createUpdate'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      tags:
        - "author"
      summary: get author 
      description: get author by filtered name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: get author by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  
          


      
    put:
      tags:
        - "author"
      summary: add or update author
      operationId: createUpdateBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          description: list of author created or updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
      
    delete:
        tags:
          - "author"
        summary: delete author
        operationId: deleteAuthor
        parameters:
          - in: query
            name: authorName
            description: delete author by name
            required: false
            schema:
              type: string
        responses:
          200:
            description: the author is deleted
         
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "books"
      parameters:
        - in: path
          name: bookId
          description: id of the book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: id of the author
          required: true
          schema:
            type: string
      responses:
        200:
          description: the author of a book
          content:
            application/json:
              schema:
                
                items:
                  $ref: '#/components/schemas/Book'
                  
  /book/author:
    put:
      tags:
        - "books"
      summary: 'all the book and author'
      description: id of the book and the author to releaseDate
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/updateBookAuthor'
      responses:
        200:
          description: the list of the author and book
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Book'

  /topic:
    
    get:
      tags:
        - "topic"
      summary: get all topics
      description: return all filtered by topic name
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
      responses:
        200:
          description: all filterd topics
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/topic'
    put:
      tags:
        - "topic"
      summary: add or update topic
      description: return the updated or added topic
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/topic'
      responses:
        200:
          description: the topic added
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/topic'
    delete:
      tags:
        - "topic"
      description: deleted a topic or all the topic
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
      responses:
        200:
          description: the book or all book are deletd succefully

         
  /topic/{idTopic}/author/{idBook}:
    put:
      tags:
        - "topic"
      summary: associate the id of topic  and bookId
      description: return all the  book and topic
      parameters:
        - in: path
          name: idTopic
          required: true
          description: id of the topic
          schema:
            type: string
      responses:
        200:
          description: the topic and book which has been associated
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Book'

  /topic/book:
    put:
      tags:
        - "topic"
      description: associate all the topic and book in one page
      requestBody:
        content:
          application/json:
            schema: 
              items:
                $ref: '#/components/schemas/updateBookTopic'
      responses:
        200:
          description: all the id association in one page 
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Book'
     
components:
  schemas:
      #the Author component
    Author:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    createUpdate:
          type: object
          properties:
            id:
              type: string
            bookName:
              type: string
                 
            pageNumbers:
              type: integer
           
            releaseDate:
              type: string
              format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/createUpdate'
        - type : object
        - properties:
            author:
              $ref: '#/components/schemas/Author'
            topic:
              $ref: '#/components/schemas/topic'
    updateBookAuthor:
      type: object
      properties:
        idAuthor:
          type: string
        idBook:
          type: string
        
    topic:
      type: object
      properties:
        schema:
          items:
            $ref: '#/components/schemas/topicName'
    topicName:
      type: object
      properties:
        name:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    updateBookTopic:
      type: object
      properties:
        idBook:
          type: string
        idTopic:
          type: string
          
          


             # updateBookAuthors:idauhtors,idbook
      
 
          #a-lasa misy get put delete ny topic :id,name(enum dia avadika objet);rehefa micreer book dia tsy misy topic intsony
#manaova pagination aminy alalany query parameters(topic)(filtre de pagination)
#associer topic et authors