openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22095
servers:
  - url: https://library.com
tags:
  - name: books
    description: books operation
  - name: author
    description: author operation
  - name: topic
    description: topic operation
  - name: visitor
paths:
  /books:
    
    get:
      tags:
        - "books"
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
     
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: startDate
          required: false
          schema:
            type: string
        - in: query
          name: releaseDateEnd
          description: endDate
          required: false
          schema: 
            type: string
        - $ref: '#/components/parameters/queryPage'
        
      

          
        

      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

    put:
      tags:
        - "books"
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/createUpdate'
      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
  /author:
    get:
      tags:
        - "author"
      summary: get author 
      description: get author by filtered name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: get author by name
          required: false
          schema:
            type: string
      responses:

        200:
          $ref: '#/components/responses/AuthorList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
          
  
        


      
    put:
      tags:
        - "author"
      summary: add or update author
      operationId: createUpdateBook
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Author'
      responses:
        200:
          $ref: '#/components/responses/AuthorList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
          
           
           
      
    delete:
        tags:
          - "author"
        summary: delete author
        operationId: deleteAuthor
        parameters:
          - in: query
            name: authorName
            description: delete author by name
            required: false
            schema:
              type: string
        responses:
          200:
            $ref: '#/components/responses/AuthorList200'
          400:
            $ref: '#/components/responses/400'
          403:
            $ref: '#/components/responses/403'
          500:
            $ref: '#/components/responses/500'
  /books/{bookId}/authors/{authorId}:
    put:
      tags:
        - "books"
      parameters:
        - in: path
          name: bookId
          description: id of the book
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: id of the author
          required: true
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'                  
  /book/author:
    put:
      tags:
        - "books"
      summary: 'all the book and author'
      description: id of the book and the author to releaseDate
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/updateBookAuthor'
      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'

  /topic:
    
    get:
      tags:
        - "topic"
      summary: get all topics
      description: return all filtered by topic name
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/TopicList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "topic"
      summary: add or update topic
      description: return the updated or added topic
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/topic'
      responses:
        200:
          $ref: '#/components/responses/TopicList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    delete:
      tags:
        - "topic"
      description: deleted a topic or all the topic
      parameters:
        - in: query
          name: topicName
          required: false
          schema:
            type: string
      responses:
        200:
          description: the book or all book are deletd succefully

         
  /topic/{idTopic}/Book/{idBook}:
    put:
      tags:
        - "topic"
      summary: associate the id of topic  and bookId
      description: return all the  book and topic
      parameters:
        - in: path
          name: idTopic
          required: true
          description: id of the topic
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /topic/book:
    put:
      tags:
        - "topic"
      description: associate all the topic and book in one page
      requestBody:
        content:
          application/json:
            schema: 
              items:
                $ref: '#/components/schemas/updateBookTopic'
      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /authors/{pageId}/{pageSizeId}:
    get:
      tags:
        - "author"
      summary: pagnation
      parameters:
        - $ref: '#/components/parameters/pathPaginationPage'
           
        - $ref: '#/components/parameters/pathPaginationPageSize'
      responses:
        200:
          $ref: '#/components/responses/AuthorList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /book/import:
    post:
      tags:
        - "books"
      summary: import book 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excelFile:
                  type: string
                  format: binary 
                jsonFile:
                  type: string
                  format: binary 
      responses:
        200:
          $ref: '#/components/responses/bookList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /visitors:
    get:
      tags:
        - "visitor"
      summary: get list of one or many visitors 
      parameters:
        - in: query
          name: visitorName
          required: false
          schema:
            type: string
      responses:
        200:
          $ref: '#/components/schemas/visitor'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
    put:
      tags:
        - "visitor"
      summary: add new visitor 
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/visitor'
      responses:
        200:
          $ref: '#/components/responses/visitorList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /borrow:
    put:
      tags:
        - "visitor"
      summary: the visitor who borrows book
      requestBody:
        content:
          application/json:
            schema: 
              type: array
              items:
                $ref: '#/components/schemas/updateVistorAndBook'
      responses:
        200:
          $ref: '#/components/responses/visitorList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
  /giveBack:
    put:
      tags:
        - "visitor"
      summary: the visitor who return book 
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/updateVistorAndBook'
      responses:
        200:
          $ref: '#/components/responses/visitorList200'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        500:
          $ref: '#/components/responses/500'
components:
  schemas:
      #the Author component
    Author:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        sex:
          type: string
          enum:
            - M
            - F
    createUpdate:
          type: object
          properties:
            id:
              type: string
            bookName:
              type: string
                 
            pageNumbers:
              type: integer
           
            releaseDate:
              type: string
              format: date
    Book:
      allOf:
        - $ref: '#/components/schemas/createUpdate'
        - type : object
        - properties:
            author:
              $ref: '#/components/schemas/Author'
            topic:
              $ref: '#/components/schemas/topic'
    updateBookAuthor:
      type: object
      properties:
        idAuthor:
          type: string
        idBook:
          type: string
        
    topic:
      type: object
      properties:
        schema:
          items:
            $ref: '#/components/schemas/topicName'
    topicName:
      type: object
      properties:
        name:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    updateBookTopic:
      type: object
      properties:
        idBook:
          type: string
        idTopic:
          type: string
   
    responseStatus:
      type: object
      properties:
        schema: 
            type: object
            properties:
               
                  code:
                    
                    type: integer
                    example: 200
                    
                  message: 
                    type: string
                    example: ok
    visitor:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        reference:
          type: string
    updateVistorAndBook:
      properties:
        idVisitor:
          type: string
        idBook: 
          type: string
    responseBodyTemplate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/responseStatus' 
        body: 
          type: object
    succefullyResponseBook:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/Book'
    successResponseAutor:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - properties:
           body:
            type: array
            items:
              $ref: '#/components/schemas/Author'
    successResponseTopic:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - properties:
            body:
              type: array
              items:
                $ref: '#/components/schemas/topic'

    successResponseVisitor:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - properties:
            body:
              type: array
              items: 
                $ref: '#/components/schemas/visitor'
    badRequest:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - example:
            status:
              code: 400
              message: bad request
            body: {}
    forbidden:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - example:
            status:
              code: 403
              message: Forbiedden
            body: {}
    ServerError:
      allOf:
        - $ref: '#/components/schemas/responseBodyTemplate'
        - example:
            status:
              code: 500
              message: internal server error
            body: {}

              

  responses:
    bookList200:
      description: list of all books
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/succefullyResponseBook'
    AuthorList200:
      description: list of authors 
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/successResponseAutor'
    TopicList200:
      description: list of topic
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/successResponseTopic'
    visitorList200:
      description: list of visitor 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/successResponseVisitor'  
    400:
      description: bad request 
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/badRequest'
    403:
      description: forbidden 
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/forbidden'
    500:
      description: server error 
      content:
        application/json:
          schema: 
            $ref: '#/components/schemas/ServerError'
    
  parameters:
    queryPage:
      name: queryPagination
      in: query
      description: pagination using the query
      required: false
      schema:
        type: object
        properties:
          page: 
            type: integer
            default: 1
          pageSize:
            type: integer
            default: 50
            
    pathPaginationPage:
      in: path
      name: pageId
      description: the number of the page
      required: true
      schema:
        type: integer
        default: 1
    pathPaginationPageSize:  
      in: path
      name: pageSizeId
      description: the size of the page
      required: true
      schema:
        type: integer
        default: 50
   
    
    

  
  
   


  

          
# vitaina le TD4                                      
